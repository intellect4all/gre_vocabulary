// Mocks generated by Mockito 5.3.2 from annotations
// in gre_vocabulary/test/src/vocabulary/infrastructure/repository/vocabulary_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:dartz/dartz.dart' as _i6;
import 'package:gre_vocabulary/src/core/common_domains/models/success_model.dart'
    as _i2;
import 'package:gre_vocabulary/src/vocabulary/domain/core/failures.dart'
    as _i11;
import 'package:gre_vocabulary/src/vocabulary/infrastructure/data_source/local_data_source.dart'
    as _i7;
import 'package:gre_vocabulary/src/vocabulary/infrastructure/models/get_words_response_model.dart'
    as _i3;
import 'package:gre_vocabulary/src/vocabulary/infrastructure/models/word_details_model.dart'
    as _i5;
import 'package:gre_vocabulary/src/vocabulary/infrastructure/models/word_model.dart'
    as _i4;
import 'package:gre_vocabulary/src/vocabulary/infrastructure/repository/wordlists_csv_parsers/csv_parser.dart'
    as _i9;
import 'package:gre_vocabulary/src/vocabulary/infrastructure/repository/words_lists/base_words_list.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSuccessModel_0 extends _i1.SmartFake implements _i2.SuccessModel {
  _FakeSuccessModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWordsResponseModel_1<T> extends _i1.SmartFake
    implements _i3.GetWordsResponseModel<T> {
  _FakeGetWordsResponseModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWordModel_2 extends _i1.SmartFake implements _i4.WordModel {
  _FakeWordModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWordDetailsModel_3 extends _i1.SmartFake
    implements _i5.WordDetailsModel {
  _FakeWordDetailsModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_4<L, R> extends _i1.SmartFake implements _i6.Either<L, R> {
  _FakeEither_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i7.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> areWordsLoaded() => (super.noSuchMethod(
        Invocation.method(
          #areWordsLoaded,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<_i2.SuccessModel> saveAllWords(List<_i4.WordModel>? allWords) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAllWords,
          [allWords],
        ),
        returnValue: _i8.Future<_i2.SuccessModel>.value(_FakeSuccessModel_0(
          this,
          Invocation.method(
            #saveAllWords,
            [allWords],
          ),
        )),
      ) as _i8.Future<_i2.SuccessModel>);
  @override
  _i8.Future<_i3.GetWordsResponseModel<_i4.WordModel>> getAllWords({
    required int? limit,
    required int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllWords,
          [],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i8.Future<_i3.GetWordsResponseModel<_i4.WordModel>>.value(
            _FakeGetWordsResponseModel_1<_i4.WordModel>(
          this,
          Invocation.method(
            #getAllWords,
            [],
            {
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i8.Future<_i3.GetWordsResponseModel<_i4.WordModel>>);
  @override
  _i8.Future<_i4.WordModel> getWord(String? word) => (super.noSuchMethod(
        Invocation.method(
          #getWord,
          [word],
        ),
        returnValue: _i8.Future<_i4.WordModel>.value(_FakeWordModel_2(
          this,
          Invocation.method(
            #getWord,
            [word],
          ),
        )),
      ) as _i8.Future<_i4.WordModel>);
  @override
  _i8.Future<_i3.GetWordsResponseModel<_i4.WordModel>> getAllWordsForSource({
    required String? source,
    required int? limit,
    required int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllWordsForSource,
          [],
          {
            #source: source,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i8.Future<_i3.GetWordsResponseModel<_i4.WordModel>>.value(
            _FakeGetWordsResponseModel_1<_i4.WordModel>(
          this,
          Invocation.method(
            #getAllWordsForSource,
            [],
            {
              #source: source,
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i8.Future<_i3.GetWordsResponseModel<_i4.WordModel>>);
  @override
  _i8.Future<_i3.GetWordsResponseModel<_i4.WordModel>> getHitWords({
    required int? limit,
    required int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHitWords,
          [],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i8.Future<_i3.GetWordsResponseModel<_i4.WordModel>>.value(
            _FakeGetWordsResponseModel_1<_i4.WordModel>(
          this,
          Invocation.method(
            #getHitWords,
            [],
            {
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i8.Future<_i3.GetWordsResponseModel<_i4.WordModel>>);
  @override
  _i8.Future<
      _i3.GetWordsResponseModel<_i5.WordDetailsModel>> getAllWordDetails({
    required int? limit,
    required int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllWordDetails,
          [],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue:
            _i8.Future<_i3.GetWordsResponseModel<_i5.WordDetailsModel>>.value(
                _FakeGetWordsResponseModel_1<_i5.WordDetailsModel>(
          this,
          Invocation.method(
            #getAllWordDetails,
            [],
            {
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i8.Future<_i3.GetWordsResponseModel<_i5.WordDetailsModel>>);
  @override
  _i8.Future<_i5.WordDetailsModel> getWordDetails({required String? word}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWordDetails,
          [],
          {#word: word},
        ),
        returnValue:
            _i8.Future<_i5.WordDetailsModel>.value(_FakeWordDetailsModel_3(
          this,
          Invocation.method(
            #getWordDetails,
            [],
            {#word: word},
          ),
        )),
      ) as _i8.Future<_i5.WordDetailsModel>);
  @override
  _i8.Future<_i2.SuccessModel> markWordAsShown({required String? word}) =>
      (super.noSuchMethod(
        Invocation.method(
          #markWordAsShown,
          [],
          {#word: word},
        ),
        returnValue: _i8.Future<_i2.SuccessModel>.value(_FakeSuccessModel_0(
          this,
          Invocation.method(
            #markWordAsShown,
            [],
            {#word: word},
          ),
        )),
      ) as _i8.Future<_i2.SuccessModel>);
  @override
  _i8.Future<_i2.SuccessModel> markWordAsToBeRemembered(
          {required String? word}) =>
      (super.noSuchMethod(
        Invocation.method(
          #markWordAsToBeRemembered,
          [],
          {#word: word},
        ),
        returnValue: _i8.Future<_i2.SuccessModel>.value(_FakeSuccessModel_0(
          this,
          Invocation.method(
            #markWordAsToBeRemembered,
            [],
            {#word: word},
          ),
        )),
      ) as _i8.Future<_i2.SuccessModel>);
  @override
  _i8.Future<_i2.SuccessModel> clearWordShowHistory({required String? word}) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearWordShowHistory,
          [],
          {#word: word},
        ),
        returnValue: _i8.Future<_i2.SuccessModel>.value(_FakeSuccessModel_0(
          this,
          Invocation.method(
            #clearWordShowHistory,
            [],
            {#word: word},
          ),
        )),
      ) as _i8.Future<_i2.SuccessModel>);
  @override
  _i8.Future<_i2.SuccessModel> markWordAsMemorized({required String? word}) =>
      (super.noSuchMethod(
        Invocation.method(
          #markWordAsMemorized,
          [],
          {#word: word},
        ),
        returnValue: _i8.Future<_i2.SuccessModel>.value(_FakeSuccessModel_0(
          this,
          Invocation.method(
            #markWordAsMemorized,
            [],
            {#word: word},
          ),
        )),
      ) as _i8.Future<_i2.SuccessModel>);
  @override
  _i8.Future<_i2.SuccessModel> removeWordFromMemorized(
          {required String? word}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeWordFromMemorized,
          [],
          {#word: word},
        ),
        returnValue: _i8.Future<_i2.SuccessModel>.value(_FakeSuccessModel_0(
          this,
          Invocation.method(
            #removeWordFromMemorized,
            [],
            {#word: word},
          ),
        )),
      ) as _i8.Future<_i2.SuccessModel>);
  @override
  _i8.Future<_i2.SuccessModel> removeWordFromToBeRemembered(
          {required String? word}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeWordFromToBeRemembered,
          [],
          {#word: word},
        ),
        returnValue: _i8.Future<_i2.SuccessModel>.value(_FakeSuccessModel_0(
          this,
          Invocation.method(
            #removeWordFromToBeRemembered,
            [],
            {#word: word},
          ),
        )),
      ) as _i8.Future<_i2.SuccessModel>);
  @override
  _i8.Future<
      _i3.GetWordsResponseModel<_i5.WordDetailsModel>> getAllMemorizedWords({
    required int? limit,
    required int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllMemorizedWords,
          [],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue:
            _i8.Future<_i3.GetWordsResponseModel<_i5.WordDetailsModel>>.value(
                _FakeGetWordsResponseModel_1<_i5.WordDetailsModel>(
          this,
          Invocation.method(
            #getAllMemorizedWords,
            [],
            {
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i8.Future<_i3.GetWordsResponseModel<_i5.WordDetailsModel>>);
  @override
  _i8.Future<_i3.GetWordsResponseModel<_i5.WordDetailsModel>> getAllShownWords({
    required int? limit,
    required int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllShownWords,
          [],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue:
            _i8.Future<_i3.GetWordsResponseModel<_i5.WordDetailsModel>>.value(
                _FakeGetWordsResponseModel_1<_i5.WordDetailsModel>(
          this,
          Invocation.method(
            #getAllShownWords,
            [],
            {
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i8.Future<_i3.GetWordsResponseModel<_i5.WordDetailsModel>>);
  @override
  _i8.Future<_i3.GetWordsResponseModel<_i5.WordDetailsModel>>
      getAllToBeRememberedWords({
    required int? limit,
    required int? offset,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getAllToBeRememberedWords,
              [],
              {
                #limit: limit,
                #offset: offset,
              },
            ),
            returnValue: _i8.Future<
                    _i3.GetWordsResponseModel<_i5.WordDetailsModel>>.value(
                _FakeGetWordsResponseModel_1<_i5.WordDetailsModel>(
              this,
              Invocation.method(
                #getAllToBeRememberedWords,
                [],
                {
                  #limit: limit,
                  #offset: offset,
                },
              ),
            )),
          ) as _i8.Future<_i3.GetWordsResponseModel<_i5.WordDetailsModel>>);
  @override
  _i8.Future<
      _i3.GetWordsResponseModel<_i5.WordDetailsModel>> getAllWordsShownToday({
    required int? limit,
    required int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllWordsShownToday,
          [],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue:
            _i8.Future<_i3.GetWordsResponseModel<_i5.WordDetailsModel>>.value(
                _FakeGetWordsResponseModel_1<_i5.WordDetailsModel>(
          this,
          Invocation.method(
            #getAllWordsShownToday,
            [],
            {
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i8.Future<_i3.GetWordsResponseModel<_i5.WordDetailsModel>>);
  @override
  _i8.Future<List<int>> allMemorizedIndexes() => (super.noSuchMethod(
        Invocation.method(
          #allMemorizedIndexes,
          [],
        ),
        returnValue: _i8.Future<List<int>>.value(<int>[]),
      ) as _i8.Future<List<int>>);
  @override
  _i8.Future<int> allWordsCount() => (super.noSuchMethod(
        Invocation.method(
          #allWordsCount,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
  @override
  _i8.Future<List<int>> allRecentlyShownIndexes(Duration? duration) =>
      (super.noSuchMethod(
        Invocation.method(
          #allRecentlyShownIndexes,
          [duration],
        ),
        returnValue: _i8.Future<List<int>>.value(<int>[]),
      ) as _i8.Future<List<int>>);
  @override
  _i8.Future<List<_i4.WordModel>> getWordsByIndexes(
          List<int>? indexesToBeShown) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWordsByIndexes,
          [indexesToBeShown],
        ),
        returnValue: _i8.Future<List<_i4.WordModel>>.value(<_i4.WordModel>[]),
      ) as _i8.Future<List<_i4.WordModel>>);
}

/// A class which mocks [CSVListsParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockCSVListsParser extends _i1.Mock implements _i9.CSVListsParser {
  MockCSVListsParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i10.BaseWordsList> get wordsLists => (super.noSuchMethod(
        Invocation.getter(#wordsLists),
        returnValue: <_i10.BaseWordsList>[],
      ) as List<_i10.BaseWordsList>);
  @override
  _i6.Either<_i11.VocabularyFailure, List<_i4.WordModel>> parse() =>
      (super.noSuchMethod(
        Invocation.method(
          #parse,
          [],
        ),
        returnValue: _FakeEither_4<_i11.VocabularyFailure, List<_i4.WordModel>>(
          this,
          Invocation.method(
            #parse,
            [],
          ),
        ),
      ) as _i6.Either<_i11.VocabularyFailure, List<_i4.WordModel>>);
}
