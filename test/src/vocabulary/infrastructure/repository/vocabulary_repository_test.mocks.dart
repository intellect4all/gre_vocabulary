// Mocks generated by Mockito 5.3.2 from annotations
// in gre_vocabulary/test/src/vocabulary/infrastructure/repository/vocabulary_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:gre_vocabulary/src/core/common_domains/models/success_model.dart'
    as _i2;
import 'package:gre_vocabulary/src/vocabulary/domain/core/failures.dart' as _i9;
import 'package:gre_vocabulary/src/vocabulary/infrastructure/data_source/local_data_source.dart'
    as _i4;
import 'package:gre_vocabulary/src/vocabulary/infrastructure/models/word_model.dart'
    as _i6;
import 'package:gre_vocabulary/src/vocabulary/infrastructure/repository/wordlists_csv_parsers/csv_parser.dart'
    as _i7;
import 'package:gre_vocabulary/src/vocabulary/infrastructure/repository/words_lists/base_words_list.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSuccessModel_0 extends _i1.SmartFake implements _i2.SuccessModel {
  _FakeSuccessModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i4.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> areWordsLoaded() => (super.noSuchMethod(
        Invocation.method(
          #areWordsLoaded,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<_i2.SuccessModel> saveAllWords(List<_i6.WordModel>? allWords) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAllWords,
          [allWords],
        ),
        returnValue: _i5.Future<_i2.SuccessModel>.value(_FakeSuccessModel_0(
          this,
          Invocation.method(
            #saveAllWords,
            [allWords],
          ),
        )),
      ) as _i5.Future<_i2.SuccessModel>);
  @override
  _i5.Future<_i2.SuccessModel> saveWordsToSource(
          Map<String, List<_i6.WordModel>>? wordsToSource) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveWordsToSource,
          [wordsToSource],
        ),
        returnValue: _i5.Future<_i2.SuccessModel>.value(_FakeSuccessModel_0(
          this,
          Invocation.method(
            #saveWordsToSource,
            [wordsToSource],
          ),
        )),
      ) as _i5.Future<_i2.SuccessModel>);
}

/// A class which mocks [CSVListsParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockCSVListsParser extends _i1.Mock implements _i7.CSVListsParser {
  MockCSVListsParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i8.BaseWordsList> get wordsLists => (super.noSuchMethod(
        Invocation.getter(#wordsLists),
        returnValue: <_i8.BaseWordsList>[],
      ) as List<_i8.BaseWordsList>);
  @override
  _i3.Either<_i9.VocabularyFailure, _i7.CSVParsingResponse> parse() =>
      (super.noSuchMethod(
        Invocation.method(
          #parse,
          [],
        ),
        returnValue:
            _FakeEither_1<_i9.VocabularyFailure, _i7.CSVParsingResponse>(
          this,
          Invocation.method(
            #parse,
            [],
          ),
        ),
      ) as _i3.Either<_i9.VocabularyFailure, _i7.CSVParsingResponse>);
}
